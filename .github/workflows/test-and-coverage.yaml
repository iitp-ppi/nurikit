#
# Project nurikit - Copyright 2023 SNU Compbio Lab.
# SPDX-License-Identifier: Apache-2.0
#

name: Test and Report Coverage

on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true

defaults:
  run:
    shell: bash

jobs:
  run-clang-tools:
    runs-on: ubuntu-latest
    if: ${{ github.triggering_actor != 'dependabot[bot]' }}

    steps:
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.16.0" # for Ubuntu 20.04

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure with cmake
        run: |
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -S . -B build -G Ninja

      - uses: cpp-linter/cpp-linter-action@v2
        id: clang-tools
        with:
          version: "15"
          extensions: "cpp,hpp,c,h"
          style: file
          tidy-checks: ""
          database: build
          ignore: ".github|build|third-party|test"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Fail fast
        if: ${{ steps.clang-tools.outputs.checks-failed > 0 }}
        run: echo "Some files failed the linting checks!" && exit 1

  coverage:
    runs-on: ubuntu-latest
    needs: ["run-clang-tools"]
    steps:
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.16.0" # for Ubuntu 20.04

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y gcovr

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Compile and run tests
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DNURIKIT_TEST_COVERAGE=ON -G Ninja ..
          cmake --build . -j --target nurikit_all_test
          ../scripts/check_coverage.sh . --xml

      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/coverage/xml/coverage.xml
          fail_ci_if_error: true
          verbose: true

  test-build:
    runs-on: ubuntu-latest
    needs: [run-clang-tools]
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}

    steps:
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.16.0" # for Ubuntu 20.04

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build and test
        # CMake 'test' target does not have dependencies on 'all' target...
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-Werror -S . -B build -G Ninja
          cmake --build build -j --target all
          cmake --build build -j --target test
